/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package com.group2project.gamingplatformgui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import oldClasses.UserSession;

/**
 *
 * @author Jeremy
 */
public class ReviewsPage extends javax.swing.JFrame {
    SQLConnection conn = SQLConnection.getInstance();
    Connection connection = conn.getConnection();
    /** Creates new form GamesPage */
    public ReviewsPage() {
        initComponents();
        addGameListSelectionListener();
        updateUserName();
        updateDeveloperName();         
        updateGameReview(); 
        updateGameRating();
        refresh();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        gamesScrollPane = new javax.swing.JScrollPane();
        gameList = new javax.swing.JList<>();
        PageTitleLabel = new javax.swing.JLabel();
        submitReviewButton = new javax.swing.JButton();
        developerNameLabel = new javax.swing.JLabel();
        StarRatingLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        userNameLabel = new javax.swing.JLabel();
        starRatingButton1 = new javax.swing.JRadioButton();
        starRatingButton2 = new javax.swing.JRadioButton();
        starRatingButton3 = new javax.swing.JRadioButton();
        starRatingButton4 = new javax.swing.JRadioButton();
        reviewScrollPane = new javax.swing.JScrollPane();
        yourReviewTextPane = new javax.swing.JTextPane();
        reviewLabel = new javax.swing.JLabel();
        starRatingButton5 = new javax.swing.JRadioButton();
        GameLibraryLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        averageGameRating = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        gameReviewDescriptions = new javax.swing.JList<>();
        deleteReviewButton = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gameList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        gamesScrollPane.setViewportView(gameList);

        PageTitleLabel.setText("Reviews");

        submitReviewButton.setText("Submit Review");
        submitReviewButton.setActionCommand("buy");
        submitReviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitReviewButtonActionPerformed(evt);
            }
        });

        developerNameLabel.setText("Developer");

        StarRatingLabel.setText("Star Rating");

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        userNameLabel.setText("UserName");

        starRatingButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                starRatingButton1StateChanged(evt);
            }
        });
        starRatingButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starRatingButton1ActionPerformed(evt);
            }
        });

        starRatingButton2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                starRatingButton2StateChanged(evt);
            }
        });
        starRatingButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starRatingButton2ActionPerformed(evt);
            }
        });

        starRatingButton3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                starRatingButton3StateChanged(evt);
            }
        });
        starRatingButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starRatingButton3ActionPerformed(evt);
            }
        });

        starRatingButton4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                starRatingButton4StateChanged(evt);
            }
        });
        starRatingButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starRatingButton4ActionPerformed(evt);
            }
        });

        reviewScrollPane.setViewportView(yourReviewTextPane);

        reviewLabel.setText("Write new review:");

        starRatingButton5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                starRatingButton5StateChanged(evt);
            }
        });
        starRatingButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starRatingButton5ActionPerformed(evt);
            }
        });

        GameLibraryLabel.setText("Game Library");

        jLabel1.setText("1");

        jLabel2.setText("2");

        jLabel3.setText("3");

        jLabel4.setText("4");

        jLabel5.setText("5");

        jLabel6.setText("Reviews:");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Game Developer:");

        jLabel8.setText("Rating:");

        averageGameRating.setText("averageGameRating");

        gameReviewDescriptions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(gameReviewDescriptions);

        deleteReviewButton.setText("Delete Review");
        deleteReviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReviewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(PageTitleLabel)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GameLibraryLabel)
                    .addComponent(refreshButton)
                    .addComponent(gamesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(developerNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userNameLabel)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reviewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(127, 127, 127)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(averageGameRating)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reviewLabel)
                                    .addComponent(deleteReviewButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(starRatingButton1))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(starRatingButton3))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(starRatingButton2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(starRatingButton4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(starRatingButton5))
                            .addComponent(StarRatingLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(submitReviewButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PageTitleLabel)
                            .addComponent(userNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(GameLibraryLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(developerNameLabel)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(averageGameRating))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(StarRatingLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(starRatingButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(starRatingButton3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(starRatingButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(starRatingButton1)))
                            .addComponent(starRatingButton4))
                        .addGap(0, 60, Short.MAX_VALUE))
                    .addComponent(gamesScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteReviewButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(reviewLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reviewScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(submitReviewButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addGameListSelectionListener() {
        gameList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                     String selectedGameTitle = gameList.getSelectedValue();
                     if (selectedGameTitle != null && !selectedGameTitle.isEmpty()) {
                        try {
                            String query = "SELECT Content FROM Reviews "
                                    + "INNER JOIN Game ON Reviews.GameID "
                                    + "= Game.GameID WHERE Game.Title = ?";
                            
                            PreparedStatement pstmt = connection.prepareStatement(query);
                            pstmt.setString(1, selectedGameTitle);                     
                            ResultSet rs = pstmt.executeQuery();
                            updateGameReview();
                            updateDeveloperName();
                            updateGameRating();
                        }catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        });
    }
    
    private void updateUserName() {
        String username = UserSession.getInstance().getUsername(); 
        if (username != null && !username.isEmpty()) {
            userNameLabel.setText(username); 
        } else {
            userNameLabel.setText("Guest"); 
        }
    }
    private void updateDeveloperName(){
        String selectedGameTitle = gameList.getSelectedValue();
        try {
            if (selectedGameTitle != null && !selectedGameTitle.isEmpty()) {
                String query = "SELECT Developer.Name " +
                           "FROM Game INNER JOIN Developer ON Game.DeveloperID = Developer.DeveloperID " +
                           "WHERE Game.Title = ?";
                PreparedStatement pstmt = connection.prepareStatement(query);
                pstmt.setString(1, selectedGameTitle);

                ResultSet rs = pstmt.executeQuery();
                if (rs.next()) {
                    developerNameLabel.setText(rs.getString(1));
                } else {
                    developerNameLabel.setText("Unknown Developer");
                }
            } else {
                developerNameLabel.setText("");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    private void updateGameReview(){
        DefaultListModel<String> reviewListModel = new DefaultListModel<>();
        String selectedGameTitle = gameList.getSelectedValue();
        
        try{
            if(selectedGameTitle != null && !selectedGameTitle.isEmpty()){
                String query = "SELECT Reviews.Content FROM Reviews INNER JOIN "+
                                "Game ON Reviews.GameID = Game.GameID WHERE Game.Title = ?";
                PreparedStatement pstmt = connection.prepareStatement(query);
                pstmt.setString(1, selectedGameTitle);
                ResultSet rs = pstmt.executeQuery();

                while (rs.next()) {
                String reviewContent = rs.getString("Content");
                reviewListModel.addElement(reviewContent);
            }
        } else {
            // No game selected, clear the list model
            reviewListModel.clear();
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
        gameReviewDescriptions.setModel(reviewListModel);
    }
    private void updateGameRating(){
        String selectedGameTitle = gameList.getSelectedValue();
        if (selectedGameTitle != null && !selectedGameTitle.isEmpty()) {
            try { 
                String query = "SELECT StarRating FROM Reviews "+
                        "INNER JOIN Game ON Reviews.GameID = Game.GameID "+
                        "WHERE Game.Title = ?";
                PreparedStatement pstmt = connection.prepareStatement(query);
                pstmt.setString(1, selectedGameTitle);
                ResultSet rs = pstmt.executeQuery();
                
                int totalRatings = 0;
                int reviewCount = 0;
                
                while (rs.next()) {
                totalRatings += rs.getInt("StarRating");
                reviewCount++;
                }
                
                double averageRating = avgRatingCalculated(totalRatings, reviewCount);
                averageGameRating.setText(String.format("%.1f", averageRating));
                            
            }catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else {
            // No game selected, clear review and rating
            averageGameRating.setText("");
        }
    }
    
    private double avgRatingCalculated(double totalRatings, int reviewCount){
        if (reviewCount == 0) {
            return 0.0; // No reviews, so average rating is 0
        } else {
            return totalRatings / reviewCount;
        }
    }
    private void submitReviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitReviewButtonActionPerformed
        String username = userNameLabel.getText();  
        String reviewerId = SQLConnection.getInstance().getPlayerIdByUsername(username);       
        
        if (reviewerId == null) {
            JOptionPane.showMessageDialog(this, "Error: Invalid username.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }      
        String selectedGameTitle = gameList.getSelectedValue();       
        int gameID = SQLConnection.getInstance().getGameIdByTitle(selectedGameTitle);
        
        if(gameID == -1){
            JOptionPane.showMessageDialog(this, "Erorr: Invalid game selected.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        String content = yourReviewTextPane.getText();
        
        if(getStarRating() > 0.0){
            double starRating = getStarRating();    
            boolean reviewSubmitted = submitReviewToDatabase(Integer.parseInt(reviewerId), gameID, content, starRating);
        
            if(reviewSubmitted){
                JOptionPane.showMessageDialog(this, "Review submitted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);       
                yourReviewTextPane.setText("");
                clearStarRating();
                refresh();
                
                int reviewId = getReviewId(Integer.parseInt(reviewerId), gameID);
                if (reviewId != -1) {
                    // Review ID retrieved successfully, you can use it as needed
                } else {
                    // Failed to retrieve review ID
                }
            }else{
               JOptionPane.showMessageDialog(this, "Failed to submit review. Please try again.", "Error", JOptionPane.ERROR_MESSAGE); 
            }
        }
        
    }//GEN-LAST:event_submitReviewButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dispose();  // Dispose of the login page
                new HomePage().setVisible(true);
            }
        });
    }//GEN-LAST:event_backButtonActionPerformed

    private void starRatingButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starRatingButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starRatingButton3ActionPerformed

    private void starRatingButton3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_starRatingButton3StateChanged
        starRatingAdjuster(evt);
    }//GEN-LAST:event_starRatingButton3StateChanged

    private void starRatingButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starRatingButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starRatingButton2ActionPerformed

    private void starRatingButton2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_starRatingButton2StateChanged
        starRatingAdjuster(evt);
    }//GEN-LAST:event_starRatingButton2StateChanged

    private void starRatingButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starRatingButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starRatingButton1ActionPerformed

    private void starRatingButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_starRatingButton1StateChanged
        starRatingAdjuster(evt);
    }//GEN-LAST:event_starRatingButton1StateChanged

    private void starRatingButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starRatingButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starRatingButton5ActionPerformed

    private void starRatingButton5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_starRatingButton5StateChanged
        starRatingAdjuster(evt);
    }//GEN-LAST:event_starRatingButton5StateChanged

    private void starRatingButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starRatingButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_starRatingButton4ActionPerformed

    private void starRatingButton4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_starRatingButton4StateChanged
        starRatingAdjuster(evt);
    }//GEN-LAST:event_starRatingButton4StateChanged

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refresh();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteReviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReviewButtonActionPerformed
        String selectedReview = gameReviewDescriptions.getSelectedValue();
        if (selectedReview != null) {
            int selectedReviewId = getSelectedReviewId(selectedReview);
            if (selectedReviewId != -1) {
                if (canDeleteReview(selectedReviewId)) {
                    if (deleteReviewFromDatabase(selectedReviewId)) {
                        JOptionPane.showMessageDialog(this, "Review delete successfully. "
                                , "Message", JOptionPane.INFORMATION_MESSAGE);
                        refresh();
                    } else {
                        JOptionPane.showMessageDialog(this, "Failed to delete the review. "
                                + "Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                   JOptionPane.showMessageDialog(this, "You do not have permission "
                           + "to delete this review.", "Error", JOptionPane.ERROR_MESSAGE); 
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a review to "
                    + "delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteReviewButtonActionPerformed
    private boolean canDeleteReview(int reviewId) {
        String username = userNameLabel.getText();  
        String reviewerId = SQLConnection.getInstance().getPlayerIdByUsername(username);       
        if (reviewerId == null) {
            JOptionPane.showMessageDialog(this, "Error: Invalid username.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            String query = "SELECT ReviewerID FROM Reviews WHERE ReviewID = ?";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, reviewId);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                int reviewerIDFromDB = rs.getInt("ReviewerID");
                return Integer.parseInt(reviewerId) == reviewerIDFromDB;
            } else {
                return false;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }
    }
    private int getSelectedReviewId(String selectedReviewContent) {
        try{
            String query = "SELECT ReviewID FROM Reviews WHERE Content = ?";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, selectedReviewContent);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("ReviewID");
            } else {
                return -1; // Review ID not found
            }
        }catch(SQLException ex){
            ex.printStackTrace();
            return -1;
        }
      
    }
    private boolean deleteReviewFromDatabase(int reviewId) {
        try {
            String query = "DELETE FROM Reviews WHERE ReviewID = ?";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, reviewId);
            int rowsAffected = pstmt.executeUpdate();
            return rowsAffected > 0; // Return true if rows were affected (review deleted), otherwise false
        } catch (SQLException ex) {
            ex.printStackTrace();
            return false; // Error occurred
        }
    }
    public void starRatingAdjuster(javax.swing.event.ChangeEvent evt){
        if (starRatingButton5.isSelected()) {
            starRatingButton1.setSelected(true);
            starRatingButton2.setSelected(true);
            starRatingButton3.setSelected(true);
            starRatingButton4.setSelected(true);
            starRatingButton5.setSelected(true);
        } else if (starRatingButton4.isSelected()) {
            starRatingButton1.setSelected(true);
            starRatingButton2.setSelected(true);
            starRatingButton3.setSelected(true);
            starRatingButton4.setSelected(true);
            starRatingButton5.setSelected(false);
        } else if (starRatingButton3.isSelected()) {
            starRatingButton1.setSelected(true);
            starRatingButton2.setSelected(true);
            starRatingButton3.setSelected(true);
            starRatingButton4.setSelected(false);
            starRatingButton5.setSelected(false);
        } else if (starRatingButton2.isSelected()) {
            starRatingButton1.setSelected(true);
            starRatingButton2.setSelected(true);
            starRatingButton3.setSelected(false);
            starRatingButton4.setSelected(false);
            starRatingButton5.setSelected(false);
        } else if (starRatingButton1.isSelected()) {
            starRatingButton1.setSelected(true);
            starRatingButton2.setSelected(false);
            starRatingButton3.setSelected(false);
            starRatingButton4.setSelected(false);
            starRatingButton5.setSelected(false);
        }else{
            starRatingButton1.setSelected(false);
            starRatingButton2.setSelected(false);
            starRatingButton3.setSelected(false);
            starRatingButton4.setSelected(false);
            starRatingButton5.setSelected(false);
        }
    }
    private double getStarRating() {
        if (starRatingButton5.isSelected()) {
            return 5.0;
        } else if (starRatingButton4.isSelected()) {
            return 4.0;
        } else if (starRatingButton3.isSelected()) {
            return 3.0;
        } else if (starRatingButton2.isSelected()) {
            return 2.0;
        } else if (starRatingButton1.isSelected()) {
            return 1.0;
        } else {
            return -1.0; // No star rating selected
        }    
    }
    private boolean submitReviewToDatabase(int reviewerId, int gameId, String content, double starRating) {
        if(conn != null){
            try{
                // Check if a review from the same reviewer for the same game already exists
                String checkQuery = "SELECT COUNT(*) FROM Reviews WHERE ReviewerID = ? AND GameID = ?";
                PreparedStatement checkStmt = connection.prepareStatement(checkQuery);
                checkStmt.setInt(1, reviewerId);
                checkStmt.setInt(2, gameId);
                ResultSet resultSet = checkStmt.executeQuery();
                resultSet.next();
                int existingReviewsCount = resultSet.getInt(1);
                
                if (existingReviewsCount > 0) {
                    // If a review already exists, update it instead of inserting a new one
                    String updateQuery = "UPDATE Reviews SET Content = ?, StarRating = ? WHERE ReviewerID = ? AND GameID = ?";
                    PreparedStatement updateStmt = connection.prepareStatement(updateQuery);
                    updateStmt.setString(1, "\n" + content); // append new content
                    updateStmt.setDouble(2, starRating);
                    updateStmt.setInt(3, reviewerId);
                    updateStmt.setInt(4, gameId);
                    int rowsAffected = updateStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Review updated successfully");
                        return true;
                    } else {
                        System.out.println("Failed to update review");
                        return false;
                    }
                }else{    
                    // If no review exists, insert a new one
                    String insertQuery = "INSERT INTO Reviews (ReviewerID, GameID, Content, StarRating) VALUES (?, ?, ?, ?)";
                    PreparedStatement insertStmt = connection.prepareStatement(insertQuery);
                    insertStmt.setInt(1, reviewerId);
                    insertStmt.setInt(2, gameId);
                    insertStmt.setString(3, content);
                    insertStmt.setDouble(4, starRating);
                    int rowsAffected = insertStmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Review submitted successfully");
                        return true;
                    } else {
                        System.out.println("Failed to submit review");
                        return false;
                    }
                }
            }catch(SQLException e){
                e.printStackTrace();
                return false;
            }
        }else {
            System.out.println("Failed to establish database connection");
            return false;
        }
    }
    private int getReviewId(int reviewerId, int gameId) {
    try {
        String query = "SELECT ReviewID FROM Reviews WHERE ReviewerID = ? AND GameID = ?";
        PreparedStatement pstmt = connection.prepareStatement(query);
        pstmt.setInt(1, reviewerId);
        pstmt.setInt(2, gameId);
        ResultSet rs = pstmt.executeQuery();
        if (rs.next()) {
            return rs.getInt("ReviewID");
        } else {
            return -1; // Review not found
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        return -1; // Error occurred
    }
}
    private void clearStarRating() {
        starRatingButton5.setSelected(false);
        starRatingButton4.setSelected(false);
        starRatingButton3.setSelected(false);
        starRatingButton2.setSelected(false);
        starRatingButton1.setSelected(false);
    }
    public void refresh(){
      try {
          developerNameLabel.setText("");
          averageGameRating.setText("");
          clearStarRating();
          
          Set<String> uniqueGameTitles = new HashSet<>();
          String query = "SELECT Game.Title FROM Reviews INNER JOIN Game ON Reviews.GameID = Game.GameID";
          
          Statement stmt = connection.createStatement();
          ResultSet rs = stmt.executeQuery(query);
          DefaultListModel listModel;
          listModel = new DefaultListModel();
          while (rs.next()) { 
              String title = rs.getString("Title");
              if (!uniqueGameTitles.contains(title)) {
                listModel.addElement(title);
                uniqueGameTitles.add(title);
            }
          }
          gameList.setModel(listModel);
          DefaultListModel reviewListModel = new DefaultListModel();
          gameReviewDescriptions.setModel(reviewListModel);
          updateGameRating();
      }catch (Exception exception) {
                    exception.printStackTrace();
      }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GameLibraryLabel;
    private javax.swing.JLabel PageTitleLabel;
    private javax.swing.JLabel StarRatingLabel;
    private javax.swing.JLabel averageGameRating;
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteReviewButton;
    private javax.swing.JLabel developerNameLabel;
    private javax.swing.JList<String> gameList;
    private javax.swing.JList<String> gameReviewDescriptions;
    private javax.swing.JScrollPane gamesScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel reviewLabel;
    private javax.swing.JScrollPane reviewScrollPane;
    private javax.swing.JRadioButton starRatingButton1;
    private javax.swing.JRadioButton starRatingButton2;
    private javax.swing.JRadioButton starRatingButton3;
    private javax.swing.JRadioButton starRatingButton4;
    private javax.swing.JRadioButton starRatingButton5;
    private javax.swing.JButton submitReviewButton;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextPane yourReviewTextPane;
    // End of variables declaration//GEN-END:variables

}
